export default async function handler(req, res) {
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method Not Allowed' });
    }

    const { progressData } = req.body;
    if (!progressData) {
        return res.status(400).json({ error: '‚ùå Thi·∫øu d·ªØ li·ªáu ti·∫øn tr√¨nh' });
    }

    const { GITHUB_TOKEN, GITHUB_REPO_URL } = process.env;

    if (!GITHUB_TOKEN || !GITHUB_REPO_URL) {
        return res.status(500).json({ error: '‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng tr√™n Vercel' });
    }

    try {
        console.log("üì• ƒêang l·∫•y SHA c·ªßa file JSON...");

        let sha = null;
        const shaResponse = await fetch(GITHUB_REPO_URL, {
            headers: {
                'Accept': 'application/vnd.github.v3+json',
                'Authorization': `Bearer ${GITHUB_TOKEN}`
            }
        });

        if (shaResponse.ok) {
            const shaData = await shaResponse.json();
            sha = shaData.sha || null;
            console.log("‚úÖ SHA l·∫•y ƒë∆∞·ª£c:", sha);
        } else if (shaResponse.status === 404) {
            console.warn("‚ö† File ch∆∞a t·ªìn t·∫°i, s·∫Ω t·∫°o m·ªõi.");
        } else {
            throw new Error("‚ùå L·ªói khi l·∫•y SHA file t·ª´ GitHub.");
        }

        console.log("üì§ ƒêang l∆∞u ti·∫øn tr√¨nh l√™n GitHub...");
        const content = Buffer.from(JSON.stringify(progressData, null, 2)).toString('base64');

        const response = await fetch(GITHUB_REPO_URL, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${GITHUB_TOKEN}`
            },
            body: JSON.stringify({
                message: 'C·∫≠p nh·∫≠t ti·∫øn tr√¨nh h·ªçc sinh',
                content: content,
                ...(sha ? { sha } : {})
            })
        });

        if (!response.ok) {
            throw new Error(`‚ùå L·ªói khi l∆∞u ti·∫øn tr√¨nh: ${response.statusText}`);
        }

        console.log("‚úÖ Ti·∫øn tr√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u l√™n GitHub!");
        res.status(200).json({ message: "Ti·∫øn tr√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u" });

    } catch (error) {
        console.error("‚ùå L·ªói khi l∆∞u ti·∫øn tr√¨nh:", error);
        res.status(500).json({ error: error.message });
    }
}
